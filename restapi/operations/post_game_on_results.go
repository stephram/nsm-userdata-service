// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostGameOnResultsHandlerFunc turns a function with the right signature into a post game on results handler
type PostGameOnResultsHandlerFunc func(PostGameOnResultsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGameOnResultsHandlerFunc) Handle(params PostGameOnResultsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostGameOnResultsHandler interface for that can handle valid post game on results params
type PostGameOnResultsHandler interface {
	Handle(PostGameOnResultsParams, interface{}) middleware.Responder
}

// NewPostGameOnResults creates a new http.Handler for the post game on results operation
func NewPostGameOnResults(ctx *middleware.Context, handler PostGameOnResultsHandler) *PostGameOnResults {
	return &PostGameOnResults{Context: ctx, Handler: handler}
}

/*PostGameOnResults swagger:route POST /userdata/v1/gameon/results/{tokenId} postGameOnResults

Post / Update GameOnResults

*/
type PostGameOnResults struct {
	Context *middleware.Context
	Handler PostGameOnResultsHandler
}

func (o *PostGameOnResults) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostGameOnResultsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
