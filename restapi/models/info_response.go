// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfoResponse info response
// swagger:model InfoResponse
type InfoResponse struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// branch name
	// Required: true
	BranchName *string `json:"branchName"`

	// build date
	// Required: true
	BuildDate *string `json:"buildDate"`

	// git commit
	// Required: true
	GitCommit *string `json:"gitCommit"`

	// name
	// Required: true
	Name *string `json:"name"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this info response
func (m *InfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfoResponse) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *InfoResponse) validateBranchName(formats strfmt.Registry) error {

	if err := validate.Required("branchName", "body", m.BranchName); err != nil {
		return err
	}

	return nil
}

func (m *InfoResponse) validateBuildDate(formats strfmt.Registry) error {

	if err := validate.Required("buildDate", "body", m.BuildDate); err != nil {
		return err
	}

	return nil
}

func (m *InfoResponse) validateGitCommit(formats strfmt.Registry) error {

	if err := validate.Required("gitCommit", "body", m.GitCommit); err != nil {
		return err
	}

	return nil
}

func (m *InfoResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InfoResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoResponse) UnmarshalBinary(b []byte) error {
	var res InfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
