// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserData user data
// swagger:model UserData
type UserData struct {

	// creation timestamp
	// Format: datetime
	CreationTimestamp strfmt.DateTime `json:"creation_timestamp,omitempty"`

	// group id
	GroupID string `json:"group_id,omitempty"`

	// interactions
	Interactions []*Interaction `json:"interactions"`

	// is child
	IsChild bool `json:"is_child,omitempty"`

	// modified timestamp
	// Format: datetime
	ModifiedTimestamp strfmt.DateTime `json:"modified_timestamp,omitempty"`

	// token id
	TokenID string `json:"token_id,omitempty"`
}

// Validate validates this user data
func (m *UserData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInteractions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserData) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_timestamp", "body", "datetime", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserData) validateInteractions(formats strfmt.Registry) error {

	if swag.IsZero(m.Interactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Interactions); i++ {
		if swag.IsZero(m.Interactions[i]) { // not required
			continue
		}

		if m.Interactions[i] != nil {
			if err := m.Interactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserData) validateModifiedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_timestamp", "body", "datetime", m.ModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserData) UnmarshalBinary(b []byte) error {
	var res UserData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
